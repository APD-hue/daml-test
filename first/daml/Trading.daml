module Trading where

--import Account (Account)
import Account (InvestmentAccount)
import Holding (Holding(..))
--import Investments (InvestmentProduct)
import Asset (InvestmentProduct)
template Offer
  with
    seller : Party
    buyer : Party
    asset : InvestmentProduct
    amount : Decimal
    price : Decimal
    expiryDate : Date
    bank : Party
  where
    signatory seller
    observer buyer, bank

    ensure amount > 0.0 && price > 0.0

    choice AcceptAndPropose : ContractId SettlementProposal
      with
        --buyerAccount : Account
        --sellerAccount : Account
        buyerAccount : InvestmentAccount
        sellerAccount : InvestmentAccount
      controller buyer
      do
        create SettlementProposal with
          seller; buyer; asset; amount; price; bank; buyerAccount; sellerAccount

template SettlementProposal
  with
    seller : Party
    buyer : Party
    asset : InvestmentProduct
    amount : Decimal
    price : Decimal
    bank : Party
    --buyerAccount : Account
    --sellerAccount : Account
    buyerAccount : InvestmentAccount
    sellerAccount : InvestmentAccount
  where
    signatory seller, buyer
    observer bank

    choice ApproveSettlement : ContractId SettlementExecution
      controller bank
      do
        create SettlementExecution with ..

template SettlementExecution
  with
    seller : Party
    buyer : Party
    asset : InvestmentProduct
    amount : Decimal
    price : Decimal
    bank : Party
    --buyerAccount : Account
    --sellerAccount : Account
    buyerAccount : InvestmentAccount
    sellerAccount : InvestmentAccount
  where
    signatory seller, buyer, bank

    choice ExecuteSettlement : ()
      controller bank
      do
        (sellerHoldingCid, sellerHolding) <- fetchByKey @Holding (sellerAccount, asset)
        assert (sellerHolding.amount >= amount)
        archive sellerHoldingCid
        create Holding with
          account = sellerAccount
          asset = asset
          amount = sellerHolding.amount - amount
        create Holding with
          account = buyerAccount
          asset = asset
          amount = amount
        return ()